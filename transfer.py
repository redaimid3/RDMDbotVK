import logging
from datetime import datetime
from vk_utils import send_message, build_inline_transactions_keyboard
from database import get_player_info, update_user, get_transaction_history
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import re
import mysql.connector

transfer_sessions = {}

def parse_recipient(text, message, sender_id, vk):
    username = extract_username_from_url(text)
    if username:
        user_id, screen_name = lookup_vk_user(username, vk)
        if user_id and user_id != str(sender_id):
            return user_id, screen_name

    user_id = extract_user_id_from_mention(text)
    if user_id and str(user_id) != str(sender_id):
        return user_id, f"vk.com/id{user_id}"

    if isinstance(message, dict):
        fwd_msgs = message.get("fwd_messages", [])
        if fwd_msgs:
            recipient_id = fwd_msgs[0].get("from_id")
            if recipient_id and str(recipient_id) != str(sender_id):
                return str(recipient_id), f"vk.com/id{recipient_id}"
        
        reply = message.get("reply_message")
        if reply:
            recipient_id = reply.get("from_id")
            if recipient_id and str(reply.get("from_id")) != str(sender_id):
                return str(reply.get("from_id")), f"vk.com/id{reply.get('from_id')}"
    
    return None, None

def extract_username_from_url(url):
    match = re.search(r"vk\.com/([A-Za-z_]+\w*)", url)
    return match.group(1) if match else None

def extract_user_id_from_mention(mention):
    match = re.search(r"\[id(\d+)\|@", mention)
    return match.group(1) if match else None

def lookup_vk_user(username, vk):
    try:
        response = vk.users.get(user_ids=username, fields="screen_name")
        if response and isinstance(response, list) and response[0].get("id"):
            user_id = str(response[0]["id"])
            screen_name = response[0].get("screen_name", username)
            return user_id, screen_name
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É {username}: {e}")
    return None, None

def initiate_transfer(user_id, message, vk):
    if isinstance(message, str):
        message = {"text": message}

    transfer_sessions[str(user_id)] = {"stage": "recipient", "sender_id": str(user_id)}
    logging.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ—Å—Å–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {transfer_sessions[str(user_id)]}")
    reply = message.get("reply_message")
    text = message.get("text", "")
    
    sum_in_text = None
    for part in text.split():
        try:
            sum_in_text = int(part)
            break
        except:
            continue

    peer_id = message.get("peer_id") or user_id
    if reply and reply.get("from_id"):
        if str(reply.get("from_id")) == str(user_id):
            send_message(vk, peer_id, "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            del transfer_sessions[str(user_id)]
            return
        transfer_sessions[str(user_id)]["recipient"] = str(reply.get("from_id"))
        transfer_sessions[str(user_id)]["recipient_name"] = f"vk.com/id{reply.get('from_id')}"
        if sum_in_text is not None:
            transfer_sessions[str(user_id)]["amount"] = sum_in_text
            transfer_sessions[str(user_id)]["stage"] = "confirm"
            send_transfer_confirmation(user_id, vk, peer_id)
        else:
            transfer_sessions[str(user_id)]["stage"] = "amount"
            send_message(vk, peer_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
    else:
        recipient, recipient_name = parse_recipient(text, message, user_id, vk)
        if recipient:
            transfer_sessions[str(user_id)]["recipient"] = recipient
            transfer_sessions[str(user_id)]["recipient_name"] = recipient_name
            if sum_in_text is not None:
                transfer_sessions[str(user_id)]["amount"] = sum_in_text
                transfer_sessions[str(user_id)]["stage"] = "confirm"
                send_transfer_confirmation(user_id, vk, peer_id)
            else:
                transfer_sessions[str(user_id)]["stage"] = "amount"
                send_message(vk, peer_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
        else:
            send_message(vk, peer_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É, —Ç–µ–≥ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞. –õ–∏–±–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ.")

def send_transfer_confirmation(user_id, vk, peer_id):
    session = transfer_sessions.get(str(user_id))
    if not session:
        logging.debug(f"–°–µ—Å—Å–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    amount = session.get("amount")
    recipient = session.get("recipient")
    recipient_name = session.get("recipient_name")
    confirmation_msg = (
        f"üí∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n"
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {amount} RD –∏–≥—Ä–æ–∫—É {recipient_name}.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
    )
    keyboard = VkKeyboard(inline=True)
    keyboard.add_button('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', color=VkKeyboardColor.POSITIVE, payload={'command': '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'})
    keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.NEGATIVE, payload={'command': '–æ—Ç–º–µ–Ω–∏—Ç—å'})
    keyboard.add_line()
    keyboard.add_button('üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', color=VkKeyboardColor.SECONDARY, payload={'command': '–¥–æ–±–∞–≤–∏—Ç—å_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'})
    send_message(vk, user_id, confirmation_msg, keyboard)

def process_transfer(bot_event, user_id, text, vk, db_cursor, db_connection):
    session = transfer_sessions.get(str(user_id))
    if not session:
        logging.debug(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False
    stage = session.get("stage")
    peer_id = bot_event.message["peer_id"] if isinstance(bot_event.message, dict) else user_id

    if stage == "recipient":
        recipient, recipient_name = parse_recipient(text, bot_event.message, user_id, vk)
        if not recipient:
            send_message(vk, peer_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É, —Ç–µ–≥ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, –ª–∏–±–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ.")
            return True
        session["recipient"] = recipient
        session["recipient_name"] = recipient_name
        session["stage"] = "amount"
        send_message(vk, peer_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É RD –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
        return True
    elif stage == "amount":
        try:
            amount = int(text)
            if amount <= 0:
                raise ValueError()
        except ValueError:
            send_message(vk, peer_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return True
        sender_user = get_player_info(db_cursor, user_id)
        if sender_user[2] < amount:
            send_message(vk, peer_id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {sender_user[2]}.")
            del transfer_sessions[str(user_id)]
            return True
        session["amount"] = amount
        session["stage"] = "confirm"
        send_transfer_confirmation(user_id, vk, peer_id)
        return True
    elif stage == "comment":
        if len(text) > 30:
            send_message(vk, peer_id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª–∏–Ω–æ–π –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤.")
            return True
        session["comment"] = text
        session["stage"] = "confirm"
        send_transfer_confirmation(user_id, vk, peer_id)
        return True
    return False

def process_transfer_confirmation(vk, user_id, action, db_cursor, db_connection):
    session = transfer_sessions.get(str(user_id))
    if not session or session.get("stage") != "confirm":
        send_message(vk, user_id, "–°–µ—Å—Å–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    logging.debug(f"Processing transfer confirmation. User ID: {user_id}, Action: {action}, Session: {session}")

    sender_user = get_player_info(db_cursor, user_id)
    recipient = session.get("recipient")
    recipient_name = session.get("recipient_name")
    comment = session.get("comment", "")
    amount = session.get("amount")

    logging.debug(f"Sender: {sender_user}, Recipient: {recipient}, Amount: {amount}, Comment: {comment}")

    if action == "–æ—Ç–º–µ–Ω–∏—Ç—å":
        send_message(vk, user_id, "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
        del transfer_sessions[str(user_id)]
        return

    if action == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        recipient_user = get_player_info(db_cursor, recipient)
        if not sender_user or not recipient_user:
            send_message(vk, user_id, "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            logging.error(f"Transfer error: could not retrieve users. Sender: {sender_user}, Recipient: {recipient_user}")
            del transfer_sessions[str(user_id)]
            return

        if sender_user[2] < amount:
            send_message(vk, user_id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {sender_user[2]}.")
            logging.error(f"Insufficient funds. Sender balance: {sender_user[2]}, Amount: {amount}")
            del transfer_sessions[str(user_id)]
            return

        update_user(db_cursor, db_connection, user_id, {"balance": sender_user[2] - amount})
        update_user(db_cursor, db_connection, recipient, {"balance": recipient_user[2] + amount})

        try:
            query = "INSERT INTO transactions (sender_id, recipient_id, amount, comment) VALUES (%s, %s, %s, %s)"
            db_cursor.execute(query, (user_id, recipient, amount, comment))
            db_connection.commit()
            logging.debug(f"Transaction logged successfully. Sender: {user_id}, Recipient: {recipient}, Amount: {amount}, Comment: {comment}")
        except mysql.connector.Error as err:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {err}")
            send_message(vk, user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
            return

        sender_user = get_player_info(db_cursor, user_id)
        recipient_user = get_player_info(db_cursor, recipient)

        send_message(
            vk, 
            user_id, 
            f"–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {amount} RD. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {sender_user[2]} RD." + (f" –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}" if comment else "")
        )
        send_message(
            vk, 
            int(recipient), 
            f"–í–∞–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω {amount} RD –æ—Ç [vk.com/id{user_id}|{sender_user[1]}]." + (f" –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}" if comment else "")
        )
        del transfer_sessions[str(user_id)]
        return

def format_transaction_history(transactions, db_cursor, vk_id, is_detailed=False):
    history_message = "ü§ùÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤\n\n"
    for i, t in enumerate(transactions):
        sender_info = get_player_info(db_cursor, t[1])
        recipient_info = get_player_info(db_cursor, t[2])
        date_str = t[4].strftime("%d.%m %H:%M")
        comment = t[5] if len(t) > 5 and t[5] else ''
        if t[1] == vk_id:
            history_message += f"{i + 1}. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [vk.com/id{t[2]}|{recipient_info[1]}] (User)\n{date_str} | {t[3]} RD" + (f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}" if comment else "") + "\n\n"
        else:
            history_message += f"{i + 1}. –ü–æ–ª—É—á–µ–Ω–æ: [vk.com/id{t[1]}|{sender_info[1]}] (User)\n{date_str} | {t[3]} RD" + (f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}" if comment else "") + "\n\n"
    if not is_detailed and len(transactions) == 10:
        history_message += "–ù–∞–∂–º–∏—Ç–µ '–í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤."
    return history_message