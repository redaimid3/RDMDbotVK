import logging
import json
from vk_api.longpoll import VkLongPoll, VkEventType
from database import connect_to_db, get_player_info, get_transaction_history, update_user, get_top_players
from vk_utils import connect_to_vk, send_message, build_keyboard, build_inline_profile_keyboard, build_inline_transactions_keyboard
from transfer import initiate_transfer, process_transfer, process_transfer_confirmation, format_transaction_history
from config import CONFIG

name_change_sessions = {}
transfer_sessions = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)

def initiate_name_change(user_id, vk):
    name_change_sessions[str(user_id)] = True
    send_message(vk, user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")

def process_name_change(user_id, text, vk, db_cursor, db_connection):
    if str(user_id) in name_change_sessions:
        if len(text) > 15:
            send_message(vk, user_id, "–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª–∏–Ω–æ–π –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤.")
            return True
        try:
            update_user(db_cursor, db_connection, user_id, {"nickname": text})
            send_message(vk, user_id, f"–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {text}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–º–µ–Ω–∏: {e}")
            send_message(vk, user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        del name_change_sessions[str(user_id)]
        return True
    return False

def main():
    vk, longpoll = connect_to_vk()
    if not vk or not longpoll:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VK API")
        return

    db_connection, db_cursor = connect_to_db()
    if not db_connection or not db_cursor:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW and event.to_me:
            user_id = event.user_id
            message = event.message
            text = event.text.lower()

            logging.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

            payload = None
            if hasattr(event, 'payload'):
                try:
                    payload = json.loads(event.payload)
                except json.JSONDecodeError:
                    pass

            command = payload.get("command") if payload else text

            if command in ["–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–æ—Ç–º–µ–Ω–∏—Ç—å"]:
                logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                process_transfer_confirmation(vk, user_id, command, db_cursor, db_connection)
            elif command == "–¥–æ–±–∞–≤–∏—Ç—å_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
                if str(user_id) in transfer_sessions:
                    logging.debug(f"–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {transfer_sessions[str(user_id)]}")
                    transfer_sessions[str(user_id)]["stage"] = "comment"
                    send_message(vk, user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):")
                else:
                    logging.debug(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    send_message(vk, user_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–Ω–∞—á–∞–ª–∞.")
            elif command == "–Ω–∞—á–∞—Ç—å":
                send_message(vk, user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", build_keyboard())
            elif command == "–ø—Ä–æ—Ñ–∏–ª—å":
                player_info = get_player_info(db_cursor, user_id)
                if player_info:
                    join_date = player_info[5].strftime("%d.%m.%Y")
                    profile_info = (
                        f"üì≤ –ü—Ä–æ—Ñ–∏–ª—å {player_info[1]}\n"
                        f"–ê–π–¥–∏: {player_info[0]}\n\n"
                        f"–û –≤–∞—Å:\n"
                        f"¬ªüè¶ –ë–∞–ª–∞–Ω—Å: {player_info[2]} RD\n\n"
                        f"¬ª‚ôæÔ∏è–ë–∞–ª–∞–Ω—Å –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {player_info[3]} RD\n\n"
                        f"¬ªüñ±Ô∏è–ö–ª–∏–∫–∏: {player_info[4]}\n\n"
                        f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {join_date}\n"
                    )
                    send_message(vk, user_id, profile_info, build_inline_profile_keyboard())
                else:
                    send_message(vk, user_id, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            elif command == "–±–∞–ª–∞–Ω—Å":
                player_info = get_player_info(db_cursor, user_id)
                if player_info:
                    balance = player_info[2]
                    send_message(vk, user_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} RD")
                else:
                    send_message(vk, user_id, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            elif command == "api":
                player_info = get_player_info(db_cursor, user_id)
                if player_info:
                    send_message(vk, user_id, f"–í–∞—à API —Ç–æ–∫–µ–Ω: {player_info[6]}")
                else:
                    send_message(vk, user_id, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            elif command == "–ø–µ—Ä–µ–≤–æ–¥":
                logging.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                initiate_transfer(user_id, message, vk)
                logging.debug(f"–°–µ—Å—Å–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {transfer_sessions.get(str(user_id))}")
            elif command == "—Å–º–µ–Ω–∏—Ç—å –∏–º—è":
                initiate_name_change(user_id, vk)
            elif command == "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":
                transactions = get_transaction_history(db_cursor, user_id, limit=10)
                history_message = format_transaction_history(transactions, db_cursor, user_id)
                send_message(vk, user_id, history_message, build_inline_transactions_keyboard())
            elif command == "–≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã":
                transactions = get_transaction_history(db_cursor, user_id, limit=50)
                history_message = format_transaction_history(transactions, db_cursor, user_id, is_detailed=True)
                send_message(vk, user_id, history_message)
            elif command == "—Ç–æ–ø":
                top_players = get_top_players(db_cursor)
                top_message = "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:\n"
                for player in top_players:
                    top_message += (
                        f"[vk.com/id{player[0]}|{player[1]}]: {player[2]} RD\n"
                    )
                send_message(vk, user_id, top_message)
            else:
                if not process_transfer(event, user_id, text, vk, db_cursor, db_connection):
                    if not process_name_change(user_id, text, vk, db_cursor, db_connection):
                        send_message(vk, user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", build_keyboard())

if __name__ == "__main__":
    main()